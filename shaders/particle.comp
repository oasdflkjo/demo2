#version 430 core

layout(std430, binding = 0) buffer ParticleBuffer {
    vec2 positions[];
};

layout(std430, binding = 1) buffer VelocityBuffer {
    vec2 velocities[];
};

uniform float delta_time;
uniform vec2 mouse_pos;
uniform float aspect_ratio;
uniform int num_particles;

layout(local_size_x = 256) in;

const float GRAVITY = 0.001;
const float RESISTANCE = 0.997;
const float ATTRACTION_STRENGTH = 5.0;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    
    if (gid >= num_particles) return;
    
    vec2 position = positions[gid];
    vec2 velocity = velocities[gid];
    
    // Calculate direction to mouse
    vec2 to_mouse = mouse_pos - position;
    to_mouse.x *= aspect_ratio; // Adjust for aspect ratio
    float distance = length(to_mouse);
    
    // Apply attraction to mouse
    vec2 attraction = normalize(to_mouse) * ATTRACTION_STRENGTH / (distance + 1.0);
    
    // Apply gravity
    vec2 gravity = vec2(0.0, -GRAVITY);
    
    // Update velocity
    velocity += (attraction + gravity) * delta_time;
    
    // Apply resistance
    velocity *= RESISTANCE;
    
    // Update position
    position += velocity * delta_time;
    
    // Wrap particles around the screen
    position = mod(position + 1.0, 2.0) - 1.0;
    
    positions[gid] = position;
    velocities[gid] = velocity;
}